{"version":3,"sources":["components/Smiley/smiley-happy.svg","components/Smiley/smiley-neutral.svg","components/Smiley/smiley-sad.svg","components/ListRow/star.svg","components/Searchbar/mg.svg","components/Smiley/Smiley.js","components/ListRow/ListRow.js","fetchDataAction/fetchMoreResturants.js","actions/index.js","reducers/fetchResturantsReducer.js","components/List/List.js","fetchDataAction/fetchResturants.js","components/Searchbar/Searchbar.js","components/Map/Mapcomponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Smiley","props","value","pic","className","src","smiley_happy","alt","smiley_neutral","smiley_sad","id","year","ListRow","useState","rating","setRating","ratingGiven","setGivenRating","row","rowData","_id","smileysComponents","smileys","map","smiley","key","date","grade","substring","onStarClick","nextValue","prevValue","name","e","preventDefault","saveReview","onStarHover","onStarHoverOut","rowClassType","extraInformation","stars","numberOfRatings","sumStars","toFixed","toString","isExpanded","text","smileyText","length","address","postcode","starCount","bind","this","editing","slice","formatExtraInformation","Star","onClick","handleClick","city","fetchMore","query","dispatch","fetch","headers","mode","then","res","json","error","type","resturants","initialState","pending","resturantLocations","page","getResturants","state","getResturantLocations","fetchResturantsReducer","action","concat","connect","listRawData","bindActionCreators","handleRowClick","updateSelectedRow","selectedRow","handleExpanedRow","starValue","body","method","JSON","stringify","useEffect","table","document","getElementById","addEventListener","url","el","target","scrollTop","clientHeight","scrollHeight","attributes","rows","fetchResturants","endpoint","includes","fetchResturantsSuccess","catch","fetchResturantsError","smileyOptions","label","sortOptions","animatedComponents","makeAnimated","setExpand","setName","orderBy","setOrder","cities","addCity","addSmiley","cityOptions","updateCityOptions","magnifyingGlass","handleSearch","result","sort","console","log","ButtonText","extraFilters","closeMenuOnSelect","components","isMulti","options","placeholder","onChange","selectedOption","tmp","forEach","element","event","onKeyPress","autoFocus","defaultValue","MapMarkerCluster","coordinates","coordinate","index","Marker","position","Popup","resturantNames","centerOfNorway","center","setCenter","zoom","setZoom","restaurant","push","selectedPointId","selectedRestaurant","filter","tmpCoordinates","Map","maxZoom","TileLayer","attribution","App","selectRestaurant","Boolean","window","location","hostname","match","enhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunk","store","createStore","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.232ee2e0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/smiley-happy.5c352696.svg\";","module.exports = __webpack_public_path__ + \"static/media/smiley-neutral.8821be19.svg\";","module.exports = __webpack_public_path__ + \"static/media/smiley-sad.d6a4195b.svg\";","module.exports = __webpack_public_path__ + \"static/media/star.e0b7262f.svg\";","module.exports = __webpack_public_path__ + \"static/media/mg.2379110d.svg\";","import React from \"react\";\r\nimport smiley_happy from \"./smiley-happy.svg\";\r\nimport smiley_neutral from \"./smiley-neutral.svg\";\r\nimport smiley_sad from \"./smiley-sad.svg\";\r\n\r\nimport \"./Smiley.css\";\r\n\r\nconst Smiley = props => {\r\n  let value = props.value;\r\n  let pic = null;\r\n  if (value === 0 || value === 1)\r\n    pic = <img className=\"Smiley\" src={smiley_happy} alt=\"Happy Face\" />;\r\n  else if (value === 2)\r\n    pic = <img className=\"Smiley\" src={smiley_neutral} alt=\"Neutral Face\" />;\r\n  else if (value === 3)\r\n    pic = <img className=\"Smiley\" src={smiley_sad} alt=\"Sad Face\" />;\r\n  else pic = <div>Ikke</div>;\r\n  return (\r\n    <div className=\"CompleteSmiley\">\r\n      {pic}\r\n      <p id=\"Text\">{props.year}</p>\r\n    </div>\r\n  );\r\n};\r\nexport default Smiley;\r\n","import React, { useState } from \"react\";\r\nimport \"./ListRow.css\";\r\nimport Smiley from \"../Smiley/Smiley.js\";\r\nimport StarRatingComponent from \"react-star-rating-component\";\r\nimport Star from \"./star.svg\";\r\n\r\nconst ListRow = props => {\r\n  //State Hook for setting rating for this row\r\n  //used to highlight hover stars, but on click ratinGiven becomes true and saves the\r\n  //last rating to the databases\r\n  const [rating, setRating] = useState(0);\r\n  const [ratingGiven, setGivenRating] = useState(false);\r\n  let row = props.rowData;\r\n  let id = row._id;\r\n  let smileysComponents = formatSmileys(row.smileys);\r\n\r\n  //format extra information in JSX format\r\n  function formatExtraInformation() {\r\n    let text = !ratingGiven ? \"Gi en vurdering :\" : \"Din vurdering:\";\r\n    let smileyText =\r\n      row.smileys.length > 1\r\n        ? \"Resultat fra tidligere inspeksjoner:\"\r\n        : \"Ingen tidligere inspeksjoner.\";\r\n    return (\r\n      <div className=\"ExtraInformation\">\r\n        <div id=\"Address2Cell\" className=\"Cell\">\r\n          {row.address}\r\n        </div>\r\n        <div id=\"GiveReviewCell\" className=\"Cell\">\r\n          {text}\r\n        </div>\r\n        <div id=\"PostcodeCell\" className=\"Cell\">\r\n          {row.postcode}\r\n        </div>\r\n        <div id=\"StarCell\" className=\"Cell\">\r\n          <StarRatingComponent\r\n            name={row.name}\r\n            //number of total stars\r\n            starCount={5}\r\n            //number of star to display\r\n            value={rating}\r\n            onStarClick={onStarClick.bind(this)}\r\n            onStarHover={onStarHover.bind(this)}\r\n            onStarHoverOut={onStarHoverOut.bind(this)}\r\n            editing={!ratingGiven}\r\n          />\r\n        </div>\r\n        <div id=\"TextCell\" className=\"Cell\">\r\n          <p className=\"Text\">{smileyText} </p>\r\n        </div>\r\n        <div id=\"OldSmileys\" className=\"Cell\">\r\n          {smileysComponents.slice(1, 7)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  //Sincronise frontend with backend with rating given by the user\r\n\r\n  //handles a start click\r\n  function onStarClick(nextValue, prevValue, name, e) {\r\n    //stop propagating to the parent onClick function (not working, must check why)\r\n    e.preventDefault();\r\n    setGivenRating(true);\r\n    props.saveReview(id, nextValue);\r\n  }\r\n  function onStarHover(nextValue) {\r\n    setRating(nextValue);\r\n  }\r\n  function onStarHoverOut() {\r\n    setRating(0);\r\n  }\r\n  function formatSmileys(smileys) {\r\n    //Split string by \".\", map the result array into an array of Objects with smileys with relative years.\r\n    // It then sortes the array by the year and finally maps the array into an array of Smiley component\r\n\r\n    return smileys.map(smiley => (\r\n      <Smiley\r\n        key={smiley.date + \"-\" + smiley.grade}\r\n        value={smiley.grade}\r\n        year={smiley.date.substring(4)}\r\n      ></Smiley>\r\n    ));\r\n  }\r\n\r\n  let rowClassType = null;\r\n  let extraInformation = null;\r\n  let stars =\r\n    row.numberOfRatings === 0\r\n      ? \"No rating yet\"\r\n      : (row.sumStars / row.numberOfRatings).toFixed(2).toString() + \"/5\";\r\n\r\n  //If prop is true, set rowClassType to expanded Row and then render an expanded row.\r\n  if (props.isExpanded) {\r\n    rowClassType = \"Row Expanded\";\r\n    extraInformation = formatExtraInformation();\r\n  } else rowClassType = \"Row\";\r\n  let pic = <img className=\"Star\" src={Star} alt=\"Star\" />;\r\n  return (\r\n    <li\r\n      className={rowClassType}\r\n      onClick={e => props.handleClick(props.id, e)}\r\n      id={props.id}\r\n    >\r\n      <div id=\"NameCell\" className=\"Cell\">\r\n        {row.name}\r\n      </div>\r\n      <div id=\"AdressCell\" className=\"Cell\">\r\n        {row.city}\r\n      </div>\r\n      <div id=\"SmileyCell\" className=\"Cell\">\r\n        {smileysComponents[0]}\r\n      </div>\r\n      <div id=\"ReviewCell\" className=\"Cell\">\r\n        <p className=\"Text\"> {stars} </p>\r\n        {pic}\r\n      </div>\r\n      {extraInformation}\r\n    </li>\r\n  );\r\n};\r\nexport default ListRow;\r\n","import { fetchMoreResturants } from \"../actions/index\";\r\n\r\nconst fetchMore = query => {\r\n  return dispatch => {\r\n    fetch(query, {\r\n      headers: {\r\n        \"Content-type\": \"text/html; charset=iso-8859-1\"\r\n      },\r\n      mode: \"cors\"\r\n    })\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        if (res.error) {\r\n          throw res.error;\r\n        }\r\n        dispatch(fetchMoreResturants(res));\r\n        return res;\r\n      });\r\n  };\r\n};\r\n\r\nexport default fetchMore;\r\n","export const FETCH_RESTURANTS_PENDING = \"FETCH_RESTURANTS_PENDING\"; // LOADING SYMBOL VED HENTING AV DATA\r\nexport const FETCH_RESTURANTS_SUCCESS = \"FETCH_RESTURANTS_SUCCESS\"; // HENTET DATA SUCCESFULLY\r\nexport const FETCH_RESTURANTS_ERROR = \"FETCH_RESTURANTS_ERROR\"; // ERROR VED HENTING AV DATA\r\nexport const FETCH_MORE_RESTURANTS = \"FETCH_MORE_RESTURANTS\";\r\nexport const FETCH_RESTURANTS_LOCATIONS = \"FETCH_RESTURANTS_LOCATIONS\";\r\n\r\nexport const fetchResturantsPending = () => ({\r\n  type: FETCH_RESTURANTS_PENDING\r\n});\r\n\r\nexport const fetchResturantsSuccess = (resturants, query) => ({\r\n  type: FETCH_RESTURANTS_SUCCESS,\r\n  resturants,\r\n  query\r\n});\r\n\r\nexport const fetchResturantsError = error => ({\r\n  type: FETCH_RESTURANTS_ERROR,\r\n  error\r\n});\r\n\r\nexport const fetchResturantLocations = resturantLocations => ({\r\n  type: FETCH_RESTURANTS_LOCATIONS,\r\n  resturantLocations\r\n});\r\n\r\nexport const fetchMoreResturants = resturants => ({\r\n  type: FETCH_MORE_RESTURANTS,\r\n  resturants\r\n});\r\n","import {\r\n  FETCH_RESTURANTS_PENDING,\r\n  FETCH_RESTURANTS_SUCCESS,\r\n  FETCH_RESTURANTS_ERROR,\r\n  FETCH_RESTURANTS_LOCATIONS,\r\n  FETCH_MORE_RESTURANTS\r\n} from \"../actions/index\";\r\n\r\nconst initialState = {\r\n  pending: false,\r\n  resturants: [],\r\n  resturantLocations: [],\r\n  error: null,\r\n  query: \"\",\r\n  page: 0\r\n};\r\n\r\nconst fetchResturantsReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case FETCH_RESTURANTS_PENDING:\r\n      return {\r\n        ...state,\r\n        pending: true,\r\n        resturants: [],\r\n        page: 0\r\n      };\r\n\r\n    case FETCH_RESTURANTS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        pending: false,\r\n        resturants: action.resturants,\r\n        query: action.query,\r\n        page: state.page + 1\r\n      };\r\n    case FETCH_RESTURANTS_ERROR:\r\n      return {\r\n        ...state,\r\n        pending: false,\r\n        error: action.error\r\n      };\r\n    case FETCH_RESTURANTS_LOCATIONS:\r\n      return {\r\n        ...state,\r\n        pending: false,\r\n        resturantLocations: action.resturantLocations\r\n      };\r\n    case FETCH_MORE_RESTURANTS:\r\n      return {\r\n        ...state,\r\n        resturants: state.resturants.concat(action.resturants),\r\n        page: state.page + 1\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const getPage = state => state.page;\r\nexport const getResturants = state => state.resturants;\r\nexport const getResturantLocations = state => state.resturantLocations;\r\nexport const getResturantsPending = state => state.pending;\r\nexport const getResturantsError = state => state.error;\r\nexport const getQuery = state => state.query;\r\n\r\nexport default fetchResturantsReducer;\r\n","import React, { useEffect } from 'react';\r\nimport ListRow from '../ListRow/ListRow.js';\r\nimport './List.css';\r\nimport fetchMore from '../../fetchDataAction/fetchMoreResturants';\r\nimport { bindActionCreators } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport { getResturants } from '../../reducers/fetchResturantsReducer';\r\n/*\r\n    Renders a List like component with expandable rows.\r\n\r\n    Props:\r\n    {listRawData} = A list of object with raw data (needs formatting)\r\n        each element of the array will be displayed as a row.\r\n    {saveReview} = Syncronises user review with backend\r\n\r\n    {listRawData} =(Array) [\r\n        {\r\n            id: \"(Int)Unique ID for Business\r\n            name: \"(String)Name of the business\",\r\n            address: \"(String)Adress without postcode\"\r\n            postcode: \"(String)Postcode\"\r\n            city: \"(String)City name\",\r\n            smileys:\"(String)Formatted as each review $date$'-'$resultValue(0-3)$ \r\n                Each revies is separated by a '.' \",\r\n            numberOfRatings: \"(Int)Number of the total ratings \",\r\n            sumStars:\"(Int)Sum of all the stars given by the users\"\r\n        }, ...\r\n    ]\r\n\r\n*/\r\nconst List = props => {\r\n  useEffect(() => {\r\n    const table = document.getElementById('Table');\r\n\r\n    table.addEventListener('scroll', e => {\r\n      const el = e.target;\r\n      //If the height of the table + the dynamic height of the scrolling cursor\r\n      // is equal to the total scrollable height of the table, bottom is reached and\r\n      // new data must be requested\r\n      if (el.scrollTop + el.clientHeight + 0.5 >= el.scrollHeight) {\r\n        fetchMoreData(table.attributes.url.value);\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  function fetchMoreData(url) {\r\n    //Fetches routine with stored query and append fetched data to already stored\r\n    //only if last char of url (String) is not 0 (page 0, just for error preventing)\r\n    if (url.slice(-2) !== '=0') {\r\n      props.fetchMore(url);\r\n    }\r\n  }\r\n\r\n  //Logic to expand selected row (Can be used for test)\r\n  function handleExpanedRow(id) {\r\n    if (props.selectedRow === id) return null;\r\n    return id;\r\n  }\r\n\r\n  //update selected row to be expanded\r\n  function handleRowClick(id) {\r\n    props.updateSelectedRow(handleExpanedRow(id));\r\n  }\r\n\r\n  function saveReview(id, starValue) {\r\n    //logic for comunicating with API\r\n    let body = { id, stars: starValue };\r\n    fetch('https://spisested-advisor-api.herokuapp.com/companies/giverating', {\r\n      method: 'PUT',\r\n      body: JSON.stringify(body),\r\n      mode: 'cors',\r\n      headers: {\r\n        'Content-type': 'application/json; charset=utf-8'\r\n      }\r\n    });\r\n  }\r\n\r\n  let rows =\r\n    props.listRawData.length === 0 ? (\r\n      <h2 id='placeholderText'>Søkeresultater listes her hvis de finnes</h2>\r\n    ) : (\r\n      props.listRawData.map(row => (\r\n        <ListRow\r\n          key={row._id}\r\n          id={row._id}\r\n          rowData={row}\r\n          handleClick={handleRowClick.bind(this)}\r\n          isExpanded={props.selectedRow === row._id}\r\n          saveReview={saveReview}\r\n        ></ListRow>\r\n      ))\r\n    );\r\n  return (\r\n    <ul id='Table' url={props.query + props.page}>\r\n      {rows}\r\n    </ul>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    query: state.query,\r\n    page: state.page,\r\n    listRawData: getResturants(state)\r\n  };\r\n};\r\nconst mapDispatchToProps = dispatch =>\r\n  bindActionCreators(\r\n    {\r\n      fetchMore: fetchMore\r\n    },\r\n    dispatch\r\n  );\r\nexport default connect(mapStateToProps, mapDispatchToProps)(List);\r\n","import {\r\n  fetchResturantsPending,\r\n  fetchResturantsSuccess,\r\n  fetchResturantsError,\r\n  fetchResturantLocations\r\n} from \"../actions/index\";\r\n\r\nconst fetchResturants = (endpoint, query) => {\r\n  return dispatch => {\r\n    dispatch(fetchResturantsPending());\r\n    fetch(endpoint + query, {\r\n      headers: {\r\n        \"Content-type\": \"text/html; charset=iso-8859-1\"\r\n      },\r\n      mode: \"cors\"\r\n    })\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        if (res.error) {\r\n          throw res.error;\r\n        }\r\n        if (endpoint.includes(\"locations\")) {\r\n          dispatch(fetchResturantLocations(res));\r\n        } else {\r\n          dispatch(fetchResturantsSuccess(res, endpoint + query));\r\n        }\r\n        return res;\r\n      })\r\n      .catch(error => {\r\n        dispatch(fetchResturantsError(error));\r\n      });\r\n  };\r\n};\r\n\r\nexport default fetchResturants;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Select from 'react-select';\r\nimport makeAnimated from 'react-select/animated';\r\nimport magnifyingGlass from './mg.svg';\r\nimport './Searchbar.css';\r\n\r\nimport fetchResturants from '../../fetchDataAction/fetchResturants';\r\nimport { bindActionCreators } from 'redux';\r\nimport { connect } from 'react-redux';\r\n\r\nconst smileyOptions = [\r\n  { value: '0', label: 'Smil' },\r\n  { value: '2', label: 'Nøytral' },\r\n  { value: '3', label: 'Sur' }\r\n];\r\n\r\nconst sortOptions = [\r\n  { value: 'NAME_AZ', label: 'Navn A-Å' },\r\n  { value: 'NAME_ZA', label: 'Navn Å-A' },\r\n  { value: 'SMILEY_DESC', label: 'Fjes Glad-Sur' },\r\n  { value: 'SMILEY_ASC', label: 'Fjes Sur-Glad' }\r\n];\r\n\r\nconst animatedComponents = makeAnimated();\r\n\r\nconst Searchbar = props => {\r\n  const [isExpanded, setExpand] = useState(false);\r\n  const [name, setName] = useState('');\r\n  const [orderBy, setOrder] = useState(sortOptions[0].value);\r\n  const [cities, addCity] = useState([]);\r\n  const [smileys, addSmiley] = useState([]);\r\n  const [cityOptions, updateCityOptions] = useState([]);\r\n\r\n  //Magnifying glass svg icon for search button\r\n  const pic = (\r\n    <img\r\n      className='MagnifyingGlass'\r\n      src={magnifyingGlass}\r\n      alt='Magnifying Glass'\r\n    />\r\n  );\r\n  //Load list of cities from server to be used in the city selector component\r\n  useEffect(() => {\r\n    fetch('https://spisested-advisor-api.herokuapp.com/companies/cities', {})\r\n      .then(res => res.json())\r\n      .then(\r\n        result => {\r\n          updateCityOptions(\r\n            result[0].cities.sort().map(city => ({ value: city, label: city }))\r\n          );\r\n        },\r\n        error => {\r\n          console.log(error, 'Error while loading cities from server'); //catch an error and throw a fail message\r\n        }\r\n      );\r\n  }, []);\r\n\r\n  //Called on click of the search button\r\n  function handleSearch() {\r\n    //Unselect the selected row by setting the id to null.\r\n    props.updateSelectedRow(null);\r\n    let endpointResturants =\r\n      'https://spisested-advisor-api.herokuapp.com/companies?';\r\n    let endpointLocations =\r\n      'https://spisested-advisor-api.herokuapp.com/companies/locations/?';\r\n    let query =\r\n      'name=' +\r\n      name +\r\n      '&orderby=' +\r\n      orderBy +\r\n      '&cities=' +\r\n      cities +\r\n      '&smileys=' +\r\n      smileys +\r\n      '&page=';\r\n    props.fetchResturants(endpointLocations, query);\r\n    props.fetchResturants(endpointResturants, query, true); // sett newSearch to true, in order to empty result set in store\r\n  }\r\n\r\n  //Called when text into textfield navn changes, updates navn state\r\n  function handleTextChange(event) {\r\n    setName(event.target.value);\r\n  }\r\n  //Called when a key is pressed in thetextfield: if the key is enter, handle the search\r\n  function handleTextKeyPress(event) {\r\n    if (event.key === 'Enter') handleSearch();\r\n  }\r\n\r\n  //Called when more filters button is clicked, toogles the expand state of the searchbar\r\n  function handleFiltersClick() {\r\n    setExpand(!isExpanded);\r\n    //set cities and smileys filter to default values\r\n    if (isExpanded) {\r\n      addCity([]);\r\n      addSmiley([]);\r\n    }\r\n  }\r\n\r\n  //Called when a new order is selected\r\n  function handleSelectOrder(selectedOption) {\r\n    setOrder(selectedOption.value);\r\n  }\r\n\r\n  //Called when a new city is selected\r\n  function handleSelectCity(selectedOption) {\r\n    let tmp = '';\r\n    if (selectedOption !== null)\r\n      selectedOption.forEach(element => {\r\n        tmp = tmp + (tmp.length > 0 ? '-' : '') + element.value;\r\n      });\r\n    addCity(tmp);\r\n  }\r\n\r\n  //Called when a new smiley filter is selected\r\n  function handleSelectSmiley(selectedOption) {\r\n    let tmp = '';\r\n    if (selectedOption !== null)\r\n      selectedOption.forEach(element => {\r\n        tmp = tmp + (tmp.length > 0 ? '-' : '') + element.value;\r\n        if (element.value === '0') tmp = tmp + '-' + '1';\r\n      });\r\n    addSmiley(tmp);\r\n  }\r\n\r\n  let ButtonText = isExpanded ? 'Færre filter' : 'Flere filter';\r\n  let extraFilters = null;\r\n  //If the searchbar is expanded, render the extra filters\r\n  if (isExpanded) {\r\n    extraFilters = (\r\n      <div id='ExtraFilters' className='Grid'>\r\n        <div className='Label' id='CitiesLabel'>\r\n          Filtrer etter byer\r\n        </div>\r\n        <div id='FilterCities' className='Cell'>\r\n          <Select\r\n            id='FilterCitiesbar'\r\n            closeMenuOnSelect={false}\r\n            components={animatedComponents}\r\n            isMulti\r\n            options={cityOptions}\r\n            placeholder='Velg..'\r\n            onChange={handleSelectCity.bind(this)}\r\n          />\r\n        </div>\r\n        <div className='Label' id='SmileysLabel'>\r\n          Filtrer etter fjes\r\n        </div>\r\n        <div id='FilterSmiley' className='Cell'>\r\n          <Select\r\n            id='FilterSmileybar'\r\n            closeMenuOnSelect={false}\r\n            components={animatedComponents}\r\n            isMulti\r\n            options={smileyOptions}\r\n            placeholder='Velg..'\r\n            onChange={handleSelectSmiley.bind(this)}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div id='Searchbar' className='Grid'>\r\n      <div id='LabelRestaurant' className='Label'>\r\n        Søk etter spisested\r\n      </div>\r\n      <div id='TextRestaurant' className='Cell'>\r\n        <input\r\n          type='text'\r\n          placeholder='Navn'\r\n          name='fname'\r\n          onChange={handleTextChange}\r\n          onKeyPress={handleTextKeyPress}\r\n          autoFocus\r\n        />\r\n        <button id='SearchButton' onClick={handleSearch}>\r\n          {pic}\r\n        </button>\r\n      </div>\r\n      <div id='LabelSort' className='Label'>\r\n        Sorter etter\r\n      </div>\r\n      <div id='SortSelect' className='Cell'>\r\n        <Select\r\n          id='SortSelectbar'\r\n          closeMenuOnSelect={true}\r\n          components={animatedComponents}\r\n          options={sortOptions}\r\n          defaultValue={sortOptions[0]}\r\n          onChange={handleSelectOrder.bind(this)}\r\n        />\r\n      </div>\r\n      <div id='FiltersButtonCell'>\r\n        <button id='FiltersButton' onClick={handleFiltersClick}>\r\n          {ButtonText}\r\n        </button>\r\n      </div>\r\n      {extraFilters}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = dispatch =>\r\n  bindActionCreators(\r\n    {\r\n      fetchResturants: fetchResturants\r\n    },\r\n    dispatch\r\n  );\r\n\r\nexport default connect(null, mapDispatchToProps)(Searchbar);\r\n","import React, { useState } from \"react\";\r\nimport \"./Mapcomponent.css\";\r\nimport { Map, TileLayer, Marker, Popup } from \"react-leaflet\";\r\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\r\nimport { connect } from \"react-redux\";\r\nimport { getResturantLocations } from \"../../reducers/fetchResturantsReducer\";\r\nconst Mapcomponent = props => {\r\n  const centerOfNorway = [64.6427, 12.4805];\r\n  const norwayZoomLevel = 5;\r\n  const restaurantZoomLevel = 20;\r\n  //Initial state of the Map component, zoom to see al norway and centered\r\n  const [center, setCenter] = useState(centerOfNorway);\r\n  const [zoom, setZoom] = useState(norwayZoomLevel);\r\n\r\n  let resturants = props.resturants;\r\n\r\n  let coordinates = [];\r\n  let resturantNames = [];\r\n  props.resturants.map(restaurant => {\r\n    if (restaurant.coordinates !== null) {\r\n      coordinates.push(restaurant.coordinates);\r\n      resturantNames.push(restaurant.name);\r\n    }\r\n  });\r\n  //If an element in the list is selected, find the relative restaurant\r\n  if (props.selectedPointId !== null) {\r\n    let selectedRestaurant = resturants.filter(\r\n      restaurant => restaurant._id === props.selectedPointId\r\n    )[0];\r\n    //If the restaurant has valid coordinates,\r\n    if (selectedRestaurant.coordinates !== null) {\r\n      let tmpCoordinates = selectedRestaurant.coordinates;\r\n      if (JSON.stringify(center) !== JSON.stringify(tmpCoordinates)) {\r\n        //Zoom in to restaurant and center\r\n        setCenter(tmpCoordinates);\r\n        setZoom(restaurantZoomLevel);\r\n      }\r\n    } //If coordinate for the match restaurant is not in the database\r\n    else if (JSON.stringify(center) !== JSON.stringify(centerOfNorway)) {\r\n      //Zoom out to all norway and center\r\n      setCenter(centerOfNorway);\r\n      setZoom(norwayZoomLevel);\r\n    }\r\n  } //If no restaurant is selected, the zoom out to all norway\r\n  else if (JSON.stringify(center) !== JSON.stringify(centerOfNorway)) {\r\n    //Zoom out to all norway and center\r\n    setCenter(centerOfNorway);\r\n    setZoom(norwayZoomLevel);\r\n  }\r\n  return (\r\n    <Map className=\"mapComponent\" center={center} zoom={zoom} maxZoom={18}>\r\n      <TileLayer\r\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        url=\"https://{s}.tile.osm.org/{z}/{x}/{y}.png\"\r\n      />\r\n      <MapMarkerCluster\r\n        coordinates={coordinates}\r\n        resturantNames={resturantNames}\r\n      />\r\n    </Map>\r\n  );\r\n};\r\n\r\nconst MapMarkerCluster = props => {\r\n  return (\r\n    <MarkerClusterGroup>\r\n      {props.coordinates.map((coordinate, index) => (\r\n        <Marker key={index} position={coordinate}>\r\n          <Popup>{props.resturantNames[index]}</Popup>\r\n        </Marker>\r\n      ))}\r\n    </MarkerClusterGroup>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  resturants: getResturantLocations(state)\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  null\r\n)(Mapcomponent);\r\n","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport List from \"././components/List/List.js\";\r\nimport Searchbar from \"././components/Searchbar/Searchbar.js\";\r\nimport Map from \"./components/Map/Mapcomponent\";\r\n\r\nfunction App(props) {\r\n  const [selectedRestaurant, selectRestaurant] = useState(null);\r\n  const updateSelectedRow = id => {\r\n    selectRestaurant(id);\r\n  };\r\n  return (\r\n    <div className=\"App\">\r\n      <div id=\"title\">\r\n        <h1>Spisested Adviser</h1>\r\n      </div>\r\n      <div id=\"searchbar\">\r\n        <Searchbar updateSelectedRow={updateSelectedRow.bind(this)}></Searchbar>\r\n      </div>\r\n      <div id=\"map\">\r\n        <Map selectedPointId={selectedRestaurant}></Map>\r\n      </div>\r\n      <div id=\"list\">\r\n        <List\r\n          updateSelectedRow={updateSelectedRow.bind(this)}\r\n          selectedRow={selectedRestaurant}\r\n        ></List>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\n\r\nimport { Provider } from 'react-redux';\r\nimport { applyMiddleware, createStore, compose } from 'redux';\r\nimport thunk from 'redux-thunk'\r\nimport fetchResturantsReducer from './reducers/fetchResturantsReducer';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst enhancer = composeEnhancers(applyMiddleware(...[thunk]));\r\n\r\nconst store = createStore(\r\n    fetchResturantsReducer, \r\n    enhancer\r\n); \r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>, \r\n    document.getElementById(\"root\")\r\n    );\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}